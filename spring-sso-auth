package io.app.auth;

import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.Objects;
import java.util.Optional;
import java.util.Set;
import java.util.stream.Collectors;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Repository;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

@SpringBootApplication
@EnableWebSecurity
public class AuthSsoSpringApplication {

	public static void main(String[] args) {
		SpringApplication.run(AuthSsoSpringApplication.class, args);
	}

}

@Configuration
class SecurityConfig extends WebSecurityConfigurerAdapter {

	@Override
	protected UserDetailsService userDetailsService() {

		return null;
	}

}

@Component
class CustomUserDetailService implements UserDetailsService {

	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
		return new UserDetail(username);
	}
}

@Component
class UserDetail implements UserDetails {

	@Autowired
	private UserDao userDao;

	private UserInfo userInfo;

	/**
	 * 
	 */
	private static final long serialVersionUID = -5076841136394017698L;

	public UserDetail(final String userName) {
		Optional<UserInfo> result = userDao.getUserInfoByusername(userName);
		if (result.isPresent()) {
			userInfo = result.get();
		}
	}

	@Override
	public Collection<? extends GrantedAuthority> getAuthorities() {
		return userInfo.getRoleList().stream().map(role -> new SimpleGrantedAuthority(role.getRoleName()))
				.collect(Collectors.toList());
	}

	@Override
	public String getPassword() {
		return userInfo.getPassword();
	}

	@Override
	public String getUsername() {
		return userInfo.getUsername();
	}

	@Override
	public boolean isAccountNonExpired() {
		return userInfo.getIsAccountNonExpired();
	}

	@Override
	public boolean isAccountNonLocked() {
		return userInfo.getIsAccountNonLocked();
	}

	@Override
	public boolean isCredentialsNonExpired() {
		return userInfo.getIsCredentialsNonExpired();
	}

	@Override
	public boolean isEnabled() {
		return userInfo.getIsEnabled();
	}
}

@Repository
interface UserDao extends JpaRepository<UserInfo, Integer> {

	public Optional<UserInfo> getUserInfoByusername(final String username);

}

@Entity
@Table(name = "USER_INFO")
class UserInfo {

	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Integer userId;
	private String username;
	private String password;
	private Date creationDate;
	private Boolean isAccountNonExpired;
	private Boolean isAccountNonLocked;
	private Boolean isCredentialsNonExpired;
	private Boolean isEnabled;

	@OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER)
	private Set<RoleInfo> roleList = new HashSet<>();

	public Integer getUserId() {
		return userId;
	}

	public void setUserId(Integer userId) {
		this.userId = userId;
	}

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getPassword() {
		return password;
	}

	public void setPassword(String password) {
		this.password = password;
	}

	public Date getCreationDate() {
		return creationDate;
	}

	public void setCreationDate(Date creationDate) {
		this.creationDate = creationDate;
	}

	public Boolean getIsAccountNonExpired() {
		return isAccountNonExpired;
	}

	public void setIsAccountNonExpired(Boolean isAccountNonExpired) {
		this.isAccountNonExpired = isAccountNonExpired;
	}

	public Boolean getIsAccountNonLocked() {
		return isAccountNonLocked;
	}

	public void setIsAccountNonLocked(Boolean isAccountNonLocked) {
		this.isAccountNonLocked = isAccountNonLocked;
	}

	public Boolean getIsCredentialsNonExpired() {
		return isCredentialsNonExpired;
	}

	public void setIsCredentialsNonExpired(Boolean isCredentialsNonExpired) {
		this.isCredentialsNonExpired = isCredentialsNonExpired;
	}

	public Boolean getIsEnabled() {
		return isEnabled;
	}

	public void setIsEnabled(Boolean isEnabled) {
		this.isEnabled = isEnabled;
	}

	public Set<RoleInfo> getRoleList() {
		return roleList;
	}

	public void setRoleList(Set<RoleInfo> roleList) {
		this.roleList = roleList;
	}

	@Override
	public int hashCode() {
		return Objects.hash(creationDate, isAccountNonExpired, isAccountNonLocked, isCredentialsNonExpired, isEnabled,
				password, roleList, userId, username);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		UserInfo other = (UserInfo) obj;
		return Objects.equals(creationDate, other.creationDate)
				&& Objects.equals(isAccountNonExpired, other.isAccountNonExpired)
				&& Objects.equals(isAccountNonLocked, other.isAccountNonLocked)
				&& Objects.equals(isCredentialsNonExpired, other.isCredentialsNonExpired)
				&& Objects.equals(isEnabled, other.isEnabled) && Objects.equals(password, other.password)
				&& Objects.equals(roleList, other.roleList) && Objects.equals(userId, other.userId)
				&& Objects.equals(username, other.username);
	}

}

@Entity
@Table(name = "ROLE_INFO")
class RoleInfo {
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	private Integer roleId;
	private String roleName;

	public Integer getRoleId() {
		return roleId;
	}

	public void setRoleId(Integer roleId) {
		this.roleId = roleId;
	}

	public String getRoleName() {
		return roleName;
	}

	public void setRoleName(String roleName) {
		this.roleName = roleName;
	}

	@Override
	public int hashCode() {
		return Objects.hash(roleId, roleName);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		RoleInfo other = (RoleInfo) obj;
		return Objects.equals(roleId, other.roleId) && Objects.equals(roleName, other.roleName);
	}
}

class RoleType {
	public final String ROLE_ADMIN = "admin";
	public final String ROLE_USER = "usr";
	public final String ROLE_DBA = "dba";
}

@RestController
class OlaController {

	@GetMapping("/discount")
	public String discountController() {
		return "5 % discount on all rides till 15-Nov";
	}
}
